{"version":3,"sources":["../../../src/components/Form/utils.js"],"names":["arrayOfErrorValidators","validatorsShape","type","PropTypes","oneOf","isRequired","message","string","minRequired","number","maxRequired","toBeValidatedFieldsShape","input_name","validators","arrayOf","shape","errorMessageHandler","func","errorActivateHandler","validate","val","validator","toBeSameFieldVal","toLowerCase","validated","length","validateEmail","email","match"],"mappings":";;;;;;;;;AAAA;;AAEA,IAAMA,sBAAsB,GAAG,CAC7B,UAD6B,EAE7B,aAF6B,EAG7B,aAH6B,EAI7B,OAJ6B,EAK7B,MAL6B,CAA/B;AAQA,IAAMC,eAAe,GAAG;AACtBC,EAAAA,IAAI,EAAEC,sBAAUC,KAAV,CAAgBJ,sBAAhB,EAAwCK,UADxB;AAEtBC,EAAAA,OAAO,EAAEH,sBAAUI,MAAV,CAAiBF,UAFJ;AAGtBG,EAAAA,WAAW,EAAEL,sBAAUM,MAHD;AAItBC,EAAAA,WAAW,EAAEP,sBAAUM;AAJD,CAAxB;AAOO,IAAME,wBAAwB,GAAG;AACtCC,EAAAA,UAAU,EAAET,sBAAUI,MAAV,CAAiBF,UADS;AAEtCQ,EAAAA,UAAU,EAAEV,sBAAUW,OAAV,CAAkBX,sBAAUY,KAAV,CAAgBd,eAAhB,CAAlB,CAF0B;AAGtCe,EAAAA,mBAAmB,EAAEb,sBAAUc,IAAV,CAAeZ,UAHE;AAItCa,EAAAA,oBAAoB,EAAEf,sBAAUc;AAJM,CAAjC;;;AAOA,IAAME,QAAQ,GAAG,SAAXA,QAAW,CACtBC,GADsB,EAEtBC,SAFsB,EAMnB;AAAA,MAHHb,WAGG,uEAHW,IAGX;AAAA,MAFHE,WAEG,uEAFW,IAEX;AAAA,MADHY,gBACG,uEADgB,IAChB;AACHD,EAAAA,SAAS,GAAGA,SAAS,CAACE,WAAV,EAAZ;AACA,MAAIC,SAAS,GAAG,IAAhB;;AAEA,MAAIH,SAAS,KAAK,UAAlB,EAA8B;AAC5B,QAAI,CAACD,GAAL,EAAU;AACRI,MAAAA,SAAS,GAAG,KAAZ;AACD;AACF;;AAED,MAAIH,SAAS,KAAK,aAAlB,EAAiC;AAC/B,QAAI,CAAAD,GAAG,SAAH,IAAAA,GAAG,WAAH,YAAAA,GAAG,CAAEK,MAAL,IAAcjB,WAAlB,EAA+B;AAC7BgB,MAAAA,SAAS,GAAG,KAAZ;AACD;AACF;;AAED,MAAIH,SAAS,KAAK,aAAlB,EAAiC;AAC/B,QAAI,CAAAD,GAAG,SAAH,IAAAA,GAAG,WAAH,YAAAA,GAAG,CAAEK,MAAL,IAAcf,WAAlB,EAA+B;AAC7Bc,MAAAA,SAAS,GAAG,KAAZ;AACD;AACF;;AAED,MAAIH,SAAS,KAAK,OAAlB,EAA2B;AACzBG,IAAAA,SAAS,GAAGE,aAAa,CAACN,GAAD,CAAzB;AACD;;AAED,MAAIC,SAAS,KAAK,MAAlB,EAA0B;AACxB,QAAID,GAAG,KAAKE,gBAAZ,EAA8B;AAC5BE,MAAAA,SAAS,GAAG,KAAZ;AACD;AACF;;AAED,SAAOA,SAAP;AACD,CAvCM;;;;AAyCP,IAAME,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAW;AAC/B,SAAOA,KAAK,CAACC,KAAN,CACL,2JADK,CAAP;AAGD,CAJD","sourcesContent":["import PropTypes from \"prop-types\";\n\nconst arrayOfErrorValidators = [\n  \"required\",\n  \"minRequired\",\n  \"maxRequired\",\n  \"email\",\n  \"same\",\n];\n\nconst validatorsShape = {\n  type: PropTypes.oneOf(arrayOfErrorValidators).isRequired,\n  message: PropTypes.string.isRequired,\n  minRequired: PropTypes.number,\n  maxRequired: PropTypes.number,\n};\n\nexport const toBeValidatedFieldsShape = {\n  input_name: PropTypes.string.isRequired,\n  validators: PropTypes.arrayOf(PropTypes.shape(validatorsShape)),\n  errorMessageHandler: PropTypes.func.isRequired,\n  errorActivateHandler: PropTypes.func,\n};\n\nexport const validate = (\n  val,\n  validator,\n  minRequired = null,\n  maxRequired = null,\n  toBeSameFieldVal = null\n) => {\n  validator = validator.toLowerCase();\n  let validated = true;\n\n  if (validator === \"required\") {\n    if (!val) {\n      validated = false;\n    }\n  }\n\n  if (validator === \"minrequired\") {\n    if (val?.length < minRequired) {\n      validated = false;\n    }\n  }\n\n  if (validator === \"maxrequired\") {\n    if (val?.length > maxRequired) {\n      validated = false;\n    }\n  }\n\n  if (validator === \"email\") {\n    validated = validateEmail(val);\n  }\n\n  if (validator === \"same\") {\n    if (val !== toBeSameFieldVal) {\n      validated = false;\n    }\n  }\n\n  return validated;\n};\n\nconst validateEmail = (email) => {\n  return email.match(\n    /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n  );\n};\n"],"file":"utils.js"}