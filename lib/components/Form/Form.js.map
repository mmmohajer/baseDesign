{"version":3,"sources":["../../../src/components/Form/Form.js"],"names":["defaultProps","defaultPropsMap","defaultPropTypes","Form","React","forwardRef","ref","onSubmit","toBeValidatedFields","className","children","props","submitHandler","e","preventDefault","is_validated","length","forEach","item","curElement","target","idx","validator","type","minRequired","maxRequired","toBeSameFieldVal","value","errorMessageHandler","message","errorActivateHandler","propTypes","PropTypes","func","arrayOf","shape","toBeValidatedFieldsShape","isRequired"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AAGA;;;;;;;;;;;;AAFA,IAAQA,YAAR,GAA2CC,wBAA3C,CAAQD,YAAR;AAAA,IAAsBE,gBAAtB,GAA2CD,wBAA3C,CAAsBC,gBAAtB;;AAIA,IAAMC,IAAI,gBAAGC,kBAAMC,UAAN,CACX,gBAAmEC,GAAnE,EAA2E;AAAA,MAAxEC,QAAwE,QAAxEA,QAAwE;AAAA,MAA9DC,mBAA8D,QAA9DA,mBAA8D;AAAA,MAAzCC,SAAyC,QAAzCA,SAAyC;AAAA,MAA9BC,QAA8B,QAA9BA,QAA8B;AAAA,MAAjBC,KAAiB;AACzE,MAAMC,aAAa,GAAG,wBAAY,UAACC,CAAD,EAAO;AACvCA,IAAAA,CAAC,CAACC,cAAF;AACA,QAAIC,YAAY,GAAG,IAAnB;;AACA,QAAIP,mBAAJ,aAAIA,mBAAJ,eAAIA,mBAAmB,CAAEQ,MAAzB,EAAiC;AAC/BR,MAAAA,mBAAmB,CAACS,OAApB,CAA4B,UAACC,IAAD,EAAU;AACpC,YAAIC,UAAU,GAAGN,CAAC,CAACO,MAAF,CAASF,IAAI,CAAC,YAAD,CAAb,CAAjB;;AACA,aAAK,IAAIG,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGH,IAAI,CAAC,YAAD,CAAJ,CAAmBF,MAA3C,EAAmDK,GAAG,EAAtD,EAA0D;AAAA;;AACxD,cAAIC,SAAS,2BAAGJ,IAAI,CAAC,YAAD,CAAJ,CAAmBG,GAAnB,CAAH,yDAAG,qBAAyBE,IAAzC;AACA,cAAIC,WAAW,4BAAGN,IAAI,CAAC,YAAD,CAAJ,CAAmBG,GAAnB,CAAH,0DAAG,sBAAyBG,WAA3C;AACA,cAAIC,WAAW,4BAAGP,IAAI,CAAC,YAAD,CAAJ,CAAmBG,GAAnB,CAAH,0DAAG,sBAAyBI,WAA3C;AACA,cAAIC,gBAAgB,4BAAGR,IAAI,CAAC,YAAD,CAAJ,CAAmBG,GAAnB,CAAH,0DAAG,sBAAyBK,gBAAhD;;AACA,cAAIJ,SAAJ,EAAe;AACb,gBACE,CAAC,qBACCH,UAAU,CAACQ,KADZ,EAECL,SAFD,EAGCE,WAHD,EAICC,WAJD,EAKCC,gBALD,CADH,EAQE;AAAA;;AACAR,cAAAA,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEU,mBAAN,0BAA0BV,IAAI,CAAC,YAAD,CAAJ,CAAmBG,GAAnB,CAA1B,0DAA0B,sBAAyBQ,OAAnD;AACAX,cAAAA,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEY,oBAAN,CAA2B,IAA3B;AACAf,cAAAA,YAAY,GAAG,KAAf;AACA;AACD;AACF;AACF;AACF,OAxBD;AAyBD;;AACD,QAAIA,YAAJ,EAAkB;AAChBR,MAAAA,QAAQ;AACT;AACF,GAjCqB,CAAtB;AAmCA,sBACE,+EACE;AACE,IAAA,SAAS,EAAE,4BAAGE,SAAH;AADb,KAEME,KAFN;AAGE,IAAA,GAAG,EAAEL,GAHP;AAIE,IAAA,QAAQ,EAAE,kBAACO,CAAD;AAAA,aAAOD,aAAa,CAACC,CAAD,CAApB;AAAA;AAJZ,MAMGH,QANH,CADF,CADF;AAYD,CAjDU,CAAb;;AAoDAP,IAAI,CAAC4B,SAAL,mCACK7B,gBADL;AAEEK,EAAAA,QAAQ,EAAEyB,sBAAUC,IAFtB;AAGEzB,EAAAA,mBAAmB,EAAEwB,sBAAUE,OAAV,CACnBF,sBAAUG,KAAV,CAAgBC,+BAAhB,EAA0CC,UADvB;AAHvB;AAQAlC,IAAI,CAACH,YAAL,qBACKA,YADL;eAIeG,I","sourcesContent":["import React, { useCallback } from \"react\";\nimport cx from \"classnames\";\nimport PropTypes from \"prop-types\";\n\nimport defaultPropsMap from \"Constants/defaultProps\";\nconst { defaultProps, defaultPropTypes } = defaultPropsMap;\n\nimport { validate, toBeValidatedFieldsShape } from \"./utils\";\n\nconst Form = React.forwardRef(\n  ({ onSubmit, toBeValidatedFields, className, children, ...props }, ref) => {\n    const submitHandler = useCallback((e) => {\n      e.preventDefault();\n      let is_validated = true;\n      if (toBeValidatedFields?.length) {\n        toBeValidatedFields.forEach((item) => {\n          let curElement = e.target[item[\"input_name\"]];\n          for (let idx = 0; idx < item[\"validators\"].length; idx++) {\n            let validator = item[\"validators\"][idx]?.type;\n            let minRequired = item[\"validators\"][idx]?.minRequired;\n            let maxRequired = item[\"validators\"][idx]?.maxRequired;\n            let toBeSameFieldVal = item[\"validators\"][idx]?.toBeSameFieldVal;\n            if (validator) {\n              if (\n                !validate(\n                  curElement.value,\n                  validator,\n                  minRequired,\n                  maxRequired,\n                  toBeSameFieldVal\n                )\n              ) {\n                item?.errorMessageHandler(item[\"validators\"][idx]?.message);\n                item?.errorActivateHandler(true);\n                is_validated = false;\n                break;\n              }\n            }\n          }\n        });\n      }\n      if (is_validated) {\n        onSubmit();\n      }\n    });\n\n    return (\n      <>\n        <form\n          className={cx(className)}\n          {...props}\n          ref={ref}\n          onSubmit={(e) => submitHandler(e)}\n        >\n          {children}\n        </form>\n      </>\n    );\n  }\n);\n\nForm.propTypes = {\n  ...defaultPropTypes,\n  onSubmit: PropTypes.func,\n  toBeValidatedFields: PropTypes.arrayOf(\n    PropTypes.shape(toBeValidatedFieldsShape).isRequired\n  ),\n};\n\nForm.defaultProps = {\n  ...defaultProps,\n};\n\nexport default Form;\n"],"file":"Form.js"}